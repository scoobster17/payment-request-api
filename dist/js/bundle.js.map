{"version":3,"sources":["webpack:///webpack/bootstrap 97e98e70b9be1ac0191b","webpack:///./src/js/app.js"],"names":["window","prd","supportsPaymentRequestAPI","startPaymentBtns","currency","customShippingOptions","init","PaymentRequest","document","querySelectorAll","length","Array","prototype","forEach","call","btn","addEventListener","event","location","protocol","getAttribute","alert","supportedPaymentMethods","supportedMethods","data","supportedNetworks","paymentDetails","total","label","amount","value","displayItems","options","requestPayerName","requestPayerPhone","requestPayerEmail","target","paymentRequest","newPaymentDetails","id","error","shippingOptions","updateWith","paymentRequestInstance","headers","Headers","append","fetchShippingOptions","fetch","method","body","JSON","stringify","shippingAddress","then","response","ok","Error","json","selectedShippingId","shippingOption","option","selected","show","paymentResponse","setTimeout","complete","catch","err"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 97e98e70b9be1ac0191b",";window.prd = window.prd || (function() {\n\n    let supportsPaymentRequestAPI = false;\n    let startPaymentBtns;\n    const currency = 'GBP';\n    let customShippingOptions;\n\n    /**\n     * PRIVATE METHODS\n     */ \n    const init = () => {\n\n        // check for API support\n        supportsPaymentRequestAPI = !!window.PaymentRequest;\n\n        // get all the buttons in the HTML for the demo\n        startPaymentBtns = document.querySelectorAll('button');\n\n        // bind event to all buttons to handle the payment request API differently\n        if (startPaymentBtns.length) Array.prototype.forEach.call(startPaymentBtns, (btn) => {\n            btn.addEventListener('click', (event) => {\n                if (supportsPaymentRequestAPI) {\n\n                    // first of all, for demo purposes, check whether the user is trying to use the server when it is not running\n                    if (location.protocol === 'file:' && btn.getAttribute('data-server') === 'true') {\n                        alert('If you want to test this button please serve the site using the README document and try again.');\n                        return;\n                    }\n                    \n                    // define the supported payment methods. This demo only deals with card payments currently\n                    var supportedPaymentMethods = [\n                        {\n                            supportedMethods: ['basic-card'],\n                            data: {\n                                supportedNetworks: ['visa', 'mastercard'] // omit this to see all supported card types\n                            }\n                        }\n                    ];\n                    \n                    // define the initial payment details object. This example shows the breakdown of display items you can also have\n                    // all logic needs to be done by BE / JS, not the API.\n                    var paymentDetails = {\n                        total: {\n                            label: 'Your label here e.g. Total',\n                            amount: {\n                                currency,\n                                value: 125\n                            }\n                        },\n                        displayItems: [\n                            {\n                                label: 'Your label here e.g. Subtotal',\n                                amount: {\n                                    currency,\n                                    value: 110\n                                }\n                            },\n                            {\n                                label: 'Your label here e.g. Discount (£10)',\n                                amount: {\n                                    currency,\n                                    value: -10\n                                }\n                            },\n                            {\n                                label: 'Your label here e.g. Tax',\n                                amount: {\n                                    currency,\n                                    value: 25\n                                }\n                            }\n                        ]\n                    }\n\n                    // define the details we want to ask the user for\n                    var options = {\n                        requestPayerName: true,\n                        requestPayerPhone: true,\n                        requestPayerEmail: true\n                    };\n\n                    // for some buttons, we also request shipping details\n                    if (event.target.getAttribute('data-shipping') !== 'false') options['requestShipping'] = true;\n\n                    // create the payment request instance with above options\n                    var paymentRequest = new PaymentRequest(\n                        supportedPaymentMethods,\n                        paymentDetails,\n                        options\n                    );\n\n                    // when applicable, this event updates the UI with shipping options provided\n                    paymentRequest.addEventListener('shippingaddresschange', event => {\n\n                        // choose for the demo if we want to use the server or not\n                        if (btn.getAttribute('data-server') === 'false') {\n\n                            let newPaymentDetails;\n                            \n                            customShippingOptions = [\n                                {\n                                    id: 'standard',\n                                    label: 'Standard Shipping (3-5 Days)',\n                                    amount: {\n                                        currency,\n                                        value: 3.99\n                                    }\n                                },\n                                {\n                                    id: 'express',\n                                    label: 'Express Shipping (1 Day)',\n                                    amount: {\n                                        currency,\n                                        value: 5.99\n                                    }\n                                },\n                                {\n                                    id: 'saturday-1300-1500',\n                                    label: 'Saturday Fixed Timeslot (13:00 - 15:00 slot)',\n                                    amount: {\n                                        currency,\n                                        value: 7.99\n                                    }\n                                }\n                            ];\n\n                            // as an example, here we are triggering an error by not providing any shipping options\n                            if (btn.getAttribute('data-shipping') === 'empty') {\n                                newPaymentDetails = {\n                                    total: {\n                                        label: 'Shipping cost',\n                                        amount: {\n                                            currency,\n                                            value: 125\n                                        }\n                                    },\n                                    error: 'This is my custom error. Comment this line to see the default message!',\n                                    shippingOptions: []\n                                };\n                            }\n                            \n                            // here we are updating the UI with valid shipping options. These can be provided in the page\n                            // or we can fetch them from a back end endpoint\n                            if (btn.getAttribute('data-shipping') === 'true') {\n                                newPaymentDetails = {\n                                    total: {\n                                        label: 'Total',\n                                        amount: {\n                                            currency,\n                                            value: 125\n                                        }\n                                    },\n                                    shippingOptions: customShippingOptions\n                                };\n                            }\n                            \n                            // update the UI with the new details calculated\n                            event.updateWith(newPaymentDetails);\n                        \n                        // if for demo purposes we are using the server\n                        } else {\n                            \n                            // we can get the shipping address from the event\n                            const paymentRequestInstance = event.target;\n\n                            // for demo purposes adjust the request\n                            const headers = new Headers();\n                            if (btn.getAttribute('data-shipping') !== \"true\") headers.append(\"fail\", \"\");\n                            \n                            // create a promise to fetch the payment options from the server\n                            const fetchShippingOptions = fetch('/get-payment-options', { method: 'POST', body: JSON.stringify(paymentRequestInstance.shippingAddress), headers })\n                            .then(response => {\n                                if (!response.ok) {\n                                    throw new Error();\n                                } else {\n                                    return response.json()\n                                };\n                            })\n                            .then(response => {\n\n                                // make the options accessible and therefore selectable\n                                customShippingOptions = response;\n\n                                // return the unadjusted amount with the payment options provided by the server\n                                return {\n                                    total: {\n                                        label: 'Total',\n                                        amount: {\n                                            currency: 'GBP',\n                                            value: 125\n                                        },\n                                    },\n                                    error: 'This is my custom error. Comment this line to see the default message!',\n                                    shippingOptions: response\n                                };\n                            });\n                            \n                            // update the UI with shipping options after a spinner is shown and removed whilst the request is made to the server\n                            event.updateWith(fetchShippingOptions);\n\n                        }\n\n                    });\n\n                    // this event listens to the user selecting a shipping option\n                    paymentRequest.addEventListener('shippingoptionchange', (event) => {  \n                        const paymentRequestInstance = event.target;\n                        const selectedShippingId = paymentRequestInstance.shippingOption;\n\n                        // mark the selected option as selected so the UI will update\n                        customShippingOptions.forEach(option => {\n                            option.selected = option.id === selectedShippingId;\n                        });\n\n                        // update the UI with an adjusted total etc.\n                        event.updateWith({\n                            total: {\n                                label: 'Total',\n                                amount: {\n                                    currency,\n                                    value: 132.99\n                                }\n                            },\n                            shippingOptions: customShippingOptions\n                        });\n                    });\n                    \n                    // this calls the Payment Request API UI in the first place, and defines what should happen when details are submitted\n                    paymentRequest.show()\n                    .then(function(paymentResponse) {\n\n                        // this is a handler for the demo to differentiate between hitting the server or not\n                        if (event.target.getAttribute('data-server') === 'false') {\n\n                            setTimeout(function() {\n\n                                // mimic checking the status (success) in the BE response\n                                if (event.target.getAttribute('data-succeed') === 'true') {\n                                    return paymentResponse.complete()\n                                        .then(() => {\n                                            alert('The payment was verified by the Back End so the Payment Request API UI is closed. This is where we can navigate to an order confirmation page.');\n                                        });\n                                    \n                                // mimic failure status returned by BE\n                                } else {\n                                    return paymentResponse.complete('fail')\n                                        .catch(() => {\n                                            alert('The payment was not verified by the Back End so the Payment Request API UI stays open and shows an error. There is no page transition.');\n                                        });\n                                }\n                                \n                            }, 1500);\n                        \n                        // if we want to use the demo's server instead\n                        } else {\n\n                            // for demo purposes, fail the request\n                            const headers = new Headers();\n                            if (event.target.getAttribute('data-succeed') === \"false\") headers.append(\"fail\", \"\");\n\n                            // get the server to check the payment details provided\n                            fetch('/check-payment', { method: 'POST', body: JSON.stringify(paymentResponse), headers })\n                            .then(response => {\n                                if (!response.ok) {\n                                    throw new Error();\n                                } else {\n                                    return response.json()\n                                };\n                            })\n                            .then(response => {\n                                // successfully complete the payment\n                                return paymentResponse.complete()\n                                    .then(() => {\n                                        alert('The payment was verified by the Back End so the Payment Request API UI is closed. This is where we can navigate to an order confirmation page.');\n                                    });\n                            })\n                            .catch(() => {\n                                // fail the payment\n                                return paymentResponse.complete('fail')\n                                    .catch(() => {\n                                        alert('The payment was not verified by the Back End so the Payment Request API UI stays open and shows an error. There is no page transition.');\n                                    });\n                            });\n                        }\n                    })\n                    .catch((err) => {\n                        alert('Nothing would happen now as the user closed the Payment Request API UI, as if to cancel the checkout process.');\n                    });\n\n                } else {\n                    // because the API is not supported we need to default back to existing checkout\n                    alert('You would now be re-directed to checkout flow as Payment Request API not supported.');\n                }\n            });\n        });\n    };\n\n    /**\n     * PUBLIC METHODS\n     */\n    return {\n        init\n    }\n\n})();\n\n// initialise the payment request demo code\nif (prd && typeof prd.init === 'function') prd.init();\n\n\n// WEBPACK FOOTER //\n// ./src/js/app.js"],"sourceRoot":""}